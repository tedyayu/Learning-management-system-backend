generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  username     String?      @unique
  password     String?
  email        String?      @unique
  role         Role
  student      Student?    @relation("UserToStudent")
  studentId    String?     @unique
  instructor   Instructor? @relation("UserToInstructor")
  instructorId String?     @unique 
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @updatedAt
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
model Student {
  id              String    @id @default(uuid())
  userId          String ?   @unique 
  user            User  ?   @relation("UserToStudent", fields: [userId], references: [id], onDelete: Cascade)
  firstName       String ?
  lastName        String?
  studentId       String    @unique 
  department      String?
  language        String?
  year            Int?
  section         String?
  phone           String?
  dob             DateTime?
  gender          String?
  address         String?
  profilePhotoURL String?
  firstTimeLogin  Boolean ?  @default(true)
  createdAt       DateTime ? @default(now())
  updatedAt       DateTime ? @updatedAt

  Submission Submission[]

  QuizAttempt QuizAttempt[]

  CourseEnrollments CourseEnrollment[]
}

model Instructor {
  id              String    @id @default(uuid())
  userId          String?  @unique 
  user            User?   @relation("UserToInstructor", fields: [userId], references: [id], onDelete: Cascade)
  firstName       String?
  lastName        String?
  instructorId    String    
  department      String?
  language        String?
  phone           String?
  gender          String?
  bio             String?
  expertise       String?
  profilePhotoURL String?
  experience      Int?      @default(0)
  salary          Decimal?
  isActive        Boolean ?  @default(true)
  hiredDate       DateTime? @default(now())
  updatedAt       DateTime  @updatedAt
  address         String?
  linkedin        String?
  twitter         String?
  website         String?

  Courses Courses[]
}

model Department {
  id            String       @id @default(uuid())
  name          String?  @unique
  lead          String?
  description   String?
  email         String?
  location      String?
  status        String?   @default("Active")
  archived      Boolean?  @default(false)
  createdBy     String?  
  createdDate   DateTime  @default(now())
  published     Boolean?  @default(false)
  courses       Courses[]
}

model Courses {
  id              String   @id @default(uuid())  
  name            String?                         
  code            String?           
  description     String?                        
  credits         Int?                           
  department      Department? @relation(fields: [departmentId], references: [id])  
  departmentId    String?                        

  instructor      Instructor? @relation(fields: [instructorId], references: [id]) 
  instructorId    String?                        

  startDate       DateTime? 
  endDate         DateTime?
  status         String?   @default("unpublished")     
  language       String?
  syllabus        String?   
  
  createdAt       DateTime?  @default(now()) 
  updatedAt       DateTime?  @updatedAt       
  
  enrollments     CourseEnrollment[] @relation("CourseToEnrollment")

  Chapter Chapter[]
}

model CourseEnrollment {
  id         String   @id @default(uuid())
  student    Student  @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  studentId  String
  course     Courses  @relation("CourseToEnrollment", fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  enrolledAt DateTime @default(now())
  @@unique([studentId, courseId]) 
}

model Chapter {
  id           String   @id @default(uuid())
  title        String?
  lessons      Lesson[] @relation("ChapterToLesson")
  courseId     String?
  course       Courses? @relation(fields: [courseId], references: [id])
  createdAt    DateTime? @default(now())
}

model Lesson {
  id           String   @id @default(uuid())
  title        String? 
  content      String?  
  order        Int?
  duration     String?
  thumbnailUrl String?
  tags         String[]
  chapter     Chapter?  @relation("ChapterToLesson", fields: [chapterId], references: [id])
  chapterId    String?
  assignments  Assignment[]
  quiz         Quiz[] @relation("LessonToQuiz")
  videoTitle   String?
  youtubeUrl   String?
  videoDescription String?
  videoDuration String?
  createdAt    DateTime? @default(now()) 
  updatedAt    DateTime? @updatedAt
}

model Assignment {
  id         String   @id @default(uuid())
  title      String?
  description String?
  dueDate    DateTime?
  lesson     Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId   String?
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime? @updatedAt 

  Submission Submission[]
}

model Submission {
  id           String   @id @default(uuid())
  fileUrl      String? 
  submittedAt  DateTime? @default(now())  

  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId String?

  student      Student?  @relation(fields: [studentId], references: [id])
  studentId    String?
}

model Quiz {
  id        String    @id @default(uuid())
  title     String?
  duration  Int?   
  isOpen    Boolean? @default(true) 

  questions Question[]   
  attempts  QuizAttempt[] 

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Lesson Lesson[] @relation("LessonToQuiz")
}

model Question {
  id       String   @id @default(uuid())
  quiz     Quiz?   @relation(fields: [quizId], references: [id])
  quizId   String?
  question String?
  options  String[] 
  answer   String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model QuizAttempt {
  id        String   @id @default(uuid())
  quiz      Quiz?    @relation(fields: [quizId], references: [id])
  quizId    String?
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String ?
  score     Int?
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime? @default(now())
}